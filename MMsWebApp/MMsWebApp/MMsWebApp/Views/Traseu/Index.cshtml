@model List<MMsWebApp.Models.TraseuPoint>

@{
    ViewData["Title"] = "Traseu Colectare";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Traseu Colectare - @ViewBag.SelectedDate.ToString("dd MMMM yyyy")</h4>
                        <div class="d-flex align-items-center">
                            <form method="get" class="me-3">
                                <select name="selectedDate" class="form-select" onchange="this.form.submit()">
                                    @foreach (var date in ViewBag.AvailableDates)
                                    {
                                        string selected = date.Date == ViewBag.SelectedDate.Date ? "selected" : "";
                                        string formattedDate = date.ToString("yyyy-MM-dd");
                                        string displayDate = date.ToString("dd MMMM yyyy");
                                        <option value="@formattedDate" selected="@(selected == "selected")">
                                            @displayDate
                                        </option>
                                    }
                                </select>
                            </form>
                            <button id="optimizeButton" class="btn btn-success me-3" onclick="optimizeRoute()">
                                <i class="bi bi-shuffle"></i> Optimizează Traseu
                            </button>
                            <form method="post" asp-action="Import">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-upload"></i> Importă Date
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (TempData["Message"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle"></i> @TempData["Message"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle"></i> @TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body">
                                    <h5 class="card-title">Total Puncte Unice</h5>
                                    <p class="card-text display-6">@ViewBag.TotalLines</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body">
                                    <h5 class="card-title">Total Colectări</h5>
                                    <p class="card-text display-6">@ViewBag.TotalCollections</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-dark">
                                <div class="card-body">
                                    <h5 class="card-title">Distanță Optimizată</h5>
                                    <p id="optimizedDistance" class="card-text display-6">0.00 km</p>
                                    <small class="text-muted" id="distanceDifference"></small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body">
                                    <h5 class="card-title">Durată Estimată</h5>
                                    <p id="estimatedDuration" class="card-text display-6">00:00:00</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-8">
                            <div id="map" style="height: 600px; margin-bottom: 20px;" class="rounded"></div>
                            <div id="routeSummary" class="alert alert-info" style="display: none;"></div>
                        </div>
                        <div class="col-md-4">
                            <div class="route-container" style="height: 600px; overflow-y: auto;">
                                @foreach (var point in Model.OrderBy(p => p.ColectatLa))
                                {
                                    <div class="route-point">
                                        <div class="point-circle"></div>
                                        <div class="route-line"></div>
                                        <div class="point-info">
                                            <strong>Mașina: @point.NrMasina</strong><br>
                                            <strong>Pubele (@point.PunctCount): @point.IdPubela</strong><br>
                                            <small>@point.Adresa</small><br>
                                            <small>Colectat la: @point.ColectatLa.ToString("HH:mm:ss")</small><br>
                                            <small>Coordonate: @point.Latitude.ToString("F6"), @point.Longitude.ToString("F6")</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive mt-4">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Nr.</th>
                                    <th>Oră</th>
                                    <th>Pubele</th>
                                    <th>ID-uri Pubele</th>
                                    <th>Adresă</th>
                                    <th>Coordonate</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (point, index) in Model.Select((p, i) => (p, i + 1)))
                                {
                                    <tr>
                                        <td>@index</td>
                                        <td>@point.ColectatLa.ToString("HH:mm:ss")</td>
                                        <td>@point.PunctCount</td>
                                        <td><code>@point.IdPubela</code></td>
                                        <td>@point.Adresa</td>
                                        <td>
                                            <small class="text-muted">
                                                @point.Latitude.ToString("F6"), @point.Longitude.ToString("F6")
                                            </small>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
    
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
     integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
     crossorigin=""></script>
     
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

    <style>
        #map { 
            width: 100%;
            height: 600px;
            border-radius: 8px;
            z-index: 1;
        }
        .marker-pin {
            width: 30px;
            height: 30px;
            border-radius: 50% 50% 50% 0;
            background: #c30b82;
            position: absolute;
            transform: rotate(-45deg);
            left: 50%;
            top: 50%;
            margin: -15px 0 0 -15px;
        }

        .marker-pin::after {
            content: '';
            width: 24px;
            height: 24px;
            margin: 3px 0 0 3px;
            background: #fff;
            position: absolute;
            border-radius: 50%;
        }

        .custom-div-icon i {
            position: absolute;
            width: 22px;
            font-size: 14px;
            left: 4px;
            top: 4px;
            text-align: center;
            transform: rotate(45deg);
        }
    </style>

    <script>
        var map, polyline, markers = [];
        let connection;

        // Get the base URL from the current window location
        const baseUrl = window.location.hostname === "localhost" ? 
            "https://localhost:7223" : 
            "https://your-remote-url.com"; // Înlocuiește cu URL-ul tău real

        // Initialize SignalR connection
        connection = new signalR.HubConnectionBuilder()
            .withUrl(`${baseUrl}/routeHub`)
            .withAutomaticReconnect()
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.onreconnecting(error => {
            console.log("Reconnecting to SignalR hub...", error);
        });

        connection.onreconnected(connectionId => {
            console.log("Reconnected to SignalR hub.", connectionId);
        });

        connection.onclose(error => {
            console.log("Connection closed.", error);
        });

        connection.on("ReceiveRouteUpdate", function (message) {
            const updates = document.getElementById("updates");
            if (updates) {
                const newUpdate = document.createElement("div");
                newUpdate.textContent = message;
                newUpdate.className = "mb-2 text-muted";
                updates.insertBefore(newUpdate, updates.firstChild);
            }
        });

        connection.start()
            .then(() => console.log("Connected to SignalR hub!"))
            .catch(function (err) {
                console.error("Error connecting to SignalR hub:", err.toString());
            });

        function initializeMap() {
            if (!map) {
                console.log("Initializing map...");
                map = L.map('map').setView([45.82245899999999, 24.147542], 13);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Add start point (Cisnădie)
                var startPoint = L.marker([45.7315361, 24.1779393], {
                    icon: L.divIcon({
                        className: 'custom-div-icon',
                        html: "<div style='background-color:#4CAF50;' class='marker-pin'></div><i class='fa fa-play' style='color: white;'></i>",
                        iconSize: [30, 42],
                        iconAnchor: [15, 42]
                    })
                }).addTo(map)
                .bindPopup("<strong>Punct Start</strong><br>Strada Șelimbărului 90, Cisnădie, Romania");

                // Add end point (Cristian)
                var endPoint = L.marker([45.7877059, 24.0247875], {
                    icon: L.divIcon({
                        className: 'custom-div-icon',
                        html: "<div style='background-color:#f44336;' class='marker-pin'></div><i class='fa fa-stop' style='color: white;'></i>",
                        iconSize: [30, 42],
                        iconAnchor: [15, 42]
                    })
                }).addTo(map)
                .bindPopup("<strong>Punct Final</strong><br>DN1 FN, Cristian 557085");

                displayPoints(@Html.Raw(Json.Serialize(Model)));
            }
        }

        function displayPoints(points) {
            // Clear existing markers and polyline
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
            if (polyline) map.removeLayer(polyline);

            points.forEach(function(point) {
                var marker = L.marker([point.latitude, point.longitude])
                    .bindPopup(`
                        <strong>Pubele (${point.punctCount})</strong><br>
                        ID-uri: ${point.idPubela}<br>
                        Adresă: ${point.adresa}<br>
                        Ora: ${new Date(point.colectatLa).toLocaleTimeString()}
                    `)
                    .addTo(map);
                markers.push(marker);
            });

            // Fit bounds to markers
            var group = new L.featureGroup(markers);
            map.fitBounds(group.getBounds());
        }

        function displayOptimizedRoute(points) {
            // Clear existing markers and polyline
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
            if (polyline) map.removeLayer(polyline);

            // Update route list first
            var routeContainer = document.querySelector('.route-container');
            routeContainer.innerHTML = '';
            points.forEach(point => {
                routeContainer.innerHTML += `
                    <div class="route-point">
                        <div class="point-circle"></div>
                        <div class="route-line"></div>
                        <div class="point-info">
                            <strong>Mașina: ${point.nrMasina}</strong><br>
                            <strong>Pubele (${point.punctCount}): ${point.idPubela}</strong><br>
                            <small>${point.adresa}</small><br>
                            <small>Colectat la: ${new Date(point.colectatLa).toLocaleTimeString()}</small><br>
                            <small>Coordonate: ${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)}</small>
                        </div>
                    </div>
                `;
            });

            var latlngs = [[45.7315361, 24.1779393]]; // Start point
            var waypoints = [];

            // Add start point
            waypoints.push([24.1779393, 45.7315361]); // Note: OSRM expects [lon, lat]

            // Add all points first with blue markers
            points.forEach(function(point) {
                var marker = L.marker([point.latitude, point.longitude], {
                    icon: L.divIcon({
                        className: 'custom-div-icon',
                        html: "<div style='background-color:#007bff;' class='marker-pin'></div>",
                        iconSize: [30, 42],
                        iconAnchor: [15, 42]
                    })
                })
                .bindPopup(`
                    <strong>Pubele (${point.punctCount})</strong><br>
                    ID-uri: ${point.idPubela}<br>
                    Adresă: ${point.adresa}<br>
                    Ora: ${new Date(point.colectatLa).toLocaleTimeString()}
                `)
                .addTo(map);
                markers.push(marker);
                waypoints.push([point.longitude, point.latitude]); // OSRM expects [lon, lat]
            });

            // Add end point
            waypoints.push([24.0247875, 45.7877059]); // Note: OSRM expects [lon, lat]

            // Create the waypoints string for the API call
            var waypointsStr = waypoints.map(w => w.join(',')).join(';');
            
            // Call OSRM API to get the route
            fetch(`https://router.project-osrm.org/route/v1/driving/${waypointsStr}?overview=full&geometries=geojson`)
                .then(response => response.json())
                .then(data => {
                    if (data.routes && data.routes.length > 0) {
                        // Convert coordinates from OSRM (they're in [lon, lat]) to [lat, lon] for Leaflet
                        var routeCoordinates = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);
                        
                        // Create the polyline with the route
                        polyline = L.polyline(routeCoordinates, {
                            color: 'red',
                            weight: 4,
                            opacity: 0.7,
                            lineJoin: 'round'
                        }).addTo(map);

                        // Add start marker
                        var startMarker = L.marker([45.7315361, 24.1779393], {
                            icon: L.divIcon({
                                className: 'custom-div-icon',
                                html: "<div style='background-color:#4CAF50;' class='marker-pin'></div><i class='fa fa-play' style='color: white;'></i>",
                                iconSize: [30, 42],
                                iconAnchor: [15, 42]
                            })
                        }).addTo(map)
                        .bindPopup("<strong>Punct Start</strong><br>Strada Șelimbărului 90, Cisnădie, Romania");

                        // Add end marker
                        var endMarker = L.marker([45.7877059, 24.0247875], {
                            icon: L.divIcon({
                                className: 'custom-div-icon',
                                html: "<div style='background-color:#f44336;' class='marker-pin'></div><i class='fa fa-stop' style='color: white;'></i>",
                                iconSize: [30, 42],
                                iconAnchor: [15, 42]
                            })
                        }).addTo(map)
                        .bindPopup("<strong>Punct Final</strong><br>DN1 FN, Cristian 557085");

                        // Fit the map to show all the route
                        map.fitBounds(polyline.getBounds(), {
                            padding: [50, 50]
                        });

                        // Start animation after a short delay to allow the list to render
                        setTimeout(() => {
                            // Animate points being visited
                            var currentIndex = 0;
                            function updateNextPoint() {
                                if (currentIndex < points.length) {
                                    // Remove old marker
                                    if (markers[currentIndex]) {
                                        map.removeLayer(markers[currentIndex]);
                                    }
                                    
                                    // Add new green marker
                                    var point = points[currentIndex];
                                    markers[currentIndex] = L.marker([point.latitude, point.longitude], {
                                        icon: L.divIcon({
                                            className: 'custom-div-icon',
                                            html: "<div style='background-color:#4CAF50;' class='marker-pin'></div>",
                                            iconSize: [30, 42],
                                            iconAnchor: [15, 42]
                                        })
                                    })
                                    .bindPopup(`
                                        <strong>Pubele (${point.punctCount})</strong><br>
                                        ID-uri: ${point.idPubela}<br>
                                        Adresă: ${point.adresa}<br>
                                        Ora: ${new Date(point.colectatLa).toLocaleTimeString()}
                                    `)
                                    .addTo(map);

                                    // Update route list item
                                    var routeItems = document.querySelectorAll('.route-point');
                                    if (routeItems[currentIndex]) {
                                        routeItems[currentIndex].classList.add('visited');
                                        routeItems[currentIndex].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                                    }

                                    currentIndex++;
                                    // Wait for collection time (30s) plus travel time
                                    setTimeout(updateNextPoint, 500); // 500ms delay for visualization
                                }
                            }

                            // Start the animation
                            updateNextPoint();
                        }, 500);

                        // Add route summary if available
                        if (data.routes[0].distance) {
                            var distanceKm = (data.routes[0].distance / 1000).toFixed(2);
                            var timeMinutes = Math.round(data.routes[0].duration / 60);
                            document.getElementById('routeSummary').style.display = 'block';
                            document.getElementById('routeSummary').innerHTML = 
                                `Distanță totală: ${distanceKm} km<br>Timp estimat: ${timeMinutes} minute`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching route:', error);
                    // Fallback to straight lines if the routing service fails
                    var latlngs = [[45.7315361, 24.1779393]];
                    points.forEach(point => latlngs.push([point.latitude, point.longitude]));
                    latlngs.push([45.7877059, 24.0247875]);
                    polyline = L.polyline(latlngs, {color: 'red', weight: 3}).addTo(map);
                    map.fitBounds(polyline.getBounds());
                });
        }

        function optimizeRoute() {
            var selectedDate = document.querySelector('select[name="selectedDate"]').value;
            var optimizeButton = document.getElementById('optimizeButton');
            
            optimizeButton.disabled = true;
            optimizeButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Optimizare...';

            fetch('/Traseu/OptimizeRoute', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(selectedDate)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    displayOptimizedRoute(data.optimizedRoute);
                    document.getElementById('optimizedDistance').textContent = data.optimizedDistance.toFixed(2) + ' km';
                    document.getElementById('distanceDifference').textContent = 
                        `Reducere: ${data.distanceDifference.toFixed(2)} km`;
                    document.getElementById('estimatedDuration').textContent = data.estimatedDuration;
                    
                    // Update route list
                    var routeContainer = document.querySelector('.route-container');
                    routeContainer.innerHTML = '';
                    data.optimizedRoute.forEach(point => {
                        routeContainer.innerHTML += `
                            <div class="route-point">
                                <div class="point-circle"></div>
                                <div class="route-line"></div>
                                <div class="point-info">
                                    <strong>Mașina: ${point.nrMasina}</strong><br>
                                    <strong>Pubele (${point.punctCount}): ${point.idPubela}</strong><br>
                                    <small>${point.adresa}</small><br>
                                    <small>Colectat la: ${new Date(point.colectatLa).toLocaleTimeString()}</small><br>
                                    <small>Coordonate: ${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)}</small>
                                </div>
                            </div>
                        `;
                    });
                } else {
                    alert('Eroare la optimizarea traseului: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Eroare la optimizarea traseului!');
            })
            .finally(() => {
                optimizeButton.disabled = false;
                optimizeButton.innerHTML = '<i class="bi bi-shuffle"></i> Optimizează Traseu';
            });
        }

        // Call initializeMap when the document is ready
        document.addEventListener('DOMContentLoaded', initializeMap);
    </script>
}

<style>
    .route-container {
        margin: 20px 0;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .route-point {
        display: flex;
        align-items: flex-start;
        margin-bottom: 20px;
        position: relative;
        transition: background-color 0.3s ease;
    }

    .route-point.visited {
        background-color: #e8f5e9;
    }

    .route-point.visited .point-circle {
        background-color: #4CAF50;
    }

    .route-point.visited .route-line {
        background-color: #4CAF50;
    }

    .point-circle {
        width: 20px;
        height: 20px;
        background-color: #dc3545;
        border-radius: 50%;
        margin-right: 20px;
        flex-shrink: 0;
        position: relative;
        z-index: 2;
    }

    .route-line {
        position: absolute;
        left: 10px;
        top: 20px;
        bottom: -20px;
        width: 2px;
        background-color: #007bff;
        z-index: 1;
    }

    .point-info {
        background: white;
        padding: 15px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        flex-grow: 1;
        margin-top: -5px;
    }

    .route-point:last-child .route-line {
        display: none;
    }

    .debug-log {
        font-family: monospace;
        font-size: 12px;
        white-space: pre-wrap;
        background: #f8f9fa;
        padding: 15px;
        margin: 0;
    }

    .alert-info {
        background-color: #f8f9fa;
        border-color: #ddd;
        color: #333;
        padding: 15px;
        margin-top: 15px;
        border-radius: 4px;
    }
</style>

@{
    ViewData["Title"] = "Import Traseu";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h4>Import Traseu</h4>
                </div>
                <div class="card-body">
                    @if (TempData["Message"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="bi bi-check-circle"></i> @TempData["Message"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle"></i> @TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> 
                        Acest proces va importa datele din fișierul CSV în baza de date, excluzând prima și ultima intrare.
                    </div>

                    <form asp-action="Import" method="post">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-upload"></i> Importă Date
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
